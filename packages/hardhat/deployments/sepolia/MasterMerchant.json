{
  "address": "0xd61F049802FF1F6aC6aEE96073FB182341286e79",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "initialWalletsAmount",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "WalletCreationFailed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllWallets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCreatingNewWallets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleCreatingNewWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1ef6490ed98f575acf7edccf8263814f31e4e6870cab5c0a14d214accb86b3e7",
  "receipt": {
    "to": null,
    "from": "0x0cD517409E60335b4d1E56FB5428B2C1396d4091",
    "contractAddress": "0xd61F049802FF1F6aC6aEE96073FB182341286e79",
    "transactionIndex": 65,
    "gasUsed": "809815",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000800000000010000000000000000000000000000000000000000000000000000001000000000000000000000002000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000020000000000000000000000000000000000004000000000000000000000000000000",
    "blockHash": "0xfed1b0f9d611245073ba5cc2e86aeee73a74b51a584608e67a4581d482fb8c46",
    "transactionHash": "0x1ef6490ed98f575acf7edccf8263814f31e4e6870cab5c0a14d214accb86b3e7",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 7309762,
        "transactionHash": "0x1ef6490ed98f575acf7edccf8263814f31e4e6870cab5c0a14d214accb86b3e7",
        "address": "0xd61F049802FF1F6aC6aEE96073FB182341286e79",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000cd517409e60335b4d1e56fb5428b2c1396d4091"
        ],
        "data": "0x",
        "logIndex": 233,
        "blockHash": "0xfed1b0f9d611245073ba5cc2e86aeee73a74b51a584608e67a4581d482fb8c46"
      }
    ],
    "blockNumber": 7309762,
    "cumulativeGasUsed": "14321308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0cD517409E60335b4d1E56FB5428B2C1396d4091",
    1
  ],
  "numDeployments": 2,
  "solcInputHash": "dde61abc4d5d717da48fca59456cb42e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"initialWalletsAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"WalletCreationFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCreatingNewWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCreatingNewWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterMerchant.sol\":\"MasterMerchant\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/MasterMerchant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.22;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Wallet } from \\\"./Wallet.sol\\\";\\n\\ncontract MasterMerchant is Ownable {\\n    address[] public wallets;\\n    bool public isCreatingNewWallets = true;\\n    uint256 private _feePercentage = 1;\\n    address private _adminAddress = 0x0cD517409E60335b4d1E56FB5428B2C1396d4091;\\n    uint256 public feesCollected;\\n\\n    event WalletCreationFailed(string message);\\n    event FundsReceived(address sender, uint256 amount);\\n\\n    constructor(address initialOwner, int256 initialWalletsAmount) Ownable(initialOwner) {\\n        for (int256 i = 0; i < initialWalletsAmount; i++) {\\n            createWallet();\\n        }\\n    }\\n\\n    // Creates a new wallet with an owner of the current contract, passes masterMerchantAddress to the wallet\\n    function createWallet() public {\\n        if (!isCreatingNewWallets) {\\n            // If condition is not met, exit the function without reverting\\n            emit WalletCreationFailed(\\\"Wallet creation is disabled\\\");\\n            return;\\n        }\\n        Wallet wallet = new Wallet(address(this));\\n        wallets.push(address(wallet));\\n    }\\n\\n    function toggleCreatingNewWallets() external onlyOwner {\\n        isCreatingNewWallets = !isCreatingNewWallets;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance - feesCollected);\\n    }\\n\\n    receive() external payable {\\n        uint256 value = msg.value;\\n        emit FundsReceived(msg.sender, value);\\n\\n        feesCollected += ((value / 100) * _feePercentage);\\n    }\\n\\n    function withdrawFees() external {\\n        require(msg.sender == _adminAddress, \\\"You're not an admin\\\");\\n        require(feesCollected == 0, \\\"No fees collected yet\\\");\\n        payable(msg.sender).transfer(feesCollected);\\n        feesCollected = 0;\\n    }\\n\\n    function getAllWallets() external view returns (address[] memory) {\\n        return wallets;\\n    }\\n}\\n\",\"keccak256\":\"0x85e09c5cdc015723f04fb0963fd83e7c04cd6c260429e7c1881987405254dfab\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.22;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { MasterMerchant } from \\\"./MasterMerchant.sol\\\";\\n\\ncontract Wallet {\\n    address masterMerchantAddress;\\n\\n    constructor(address masterMerchant) {\\n        masterMerchantAddress = masterMerchant;\\n    }\\n\\n    // Creates a new wallet\\n    function createWallet() public {\\n        MasterMerchant masterMerchant = MasterMerchant(payable(masterMerchantAddress));\\n        masterMerchant.createWallet();\\n    }\\n\\n    // Receives and transfers assets to the master merchant\\n    receive() external payable {\\n        payable(masterMerchantAddress).transfer(msg.value);\\n        createWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xf1112f0ecbccc589ca70d145afa7db4fc8b1b03c4746a6819e14c6069b053244\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff19166001908117909155600355600480546001600160a01b031916730cd517409e60335b4d1e56fb5428b2c1396d409117905534801561004957600080fd5b50604051610d0a380380610d0a83398101604081905261006891610222565b816001600160a01b03811661009757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100a0816100c4565b5060005b818112156100bc576100b4610114565b6001016100a4565b50505061025c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff16610187577ff3ba6a32224bd1840dbae5a49fc0ad8a7591033967326be8175700bd4cd904e160405161017d906020808252601b908201527f57616c6c6574206372656174696f6e2069732064697361626c65640000000000604082015260600190565b60405180910390a1565b60003060405161019690610215565b6001600160a01b039091168152602001604051809103906000f0801580156101c2573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b039290921691909117905550565b61019d80610b6d83390190565b6000806040838503121561023557600080fd5b82516001600160a01b038116811461024c57600080fd5b6020939093015192949293505050565b6109028061026b6000396000f3fe6080604052600436106100a05760003560e01c80636a09d4b2116100645780636a09d4b214610197578063715018a6146101c15780637ad71f72146101d65780638da5cb5b1461020e578063f071db5a1461022c578063f2fde38b1461025057600080fd5b806311ebbf24146101165780631bfa86011461012d5780633ccfd60b14610158578063476343ee1461016d5780635ca66b591461018257600080fd5b3661011157604080513381523460208201819052917f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f910160405180910390a16003546100ee606483610634565b6100f89190610656565b600560008282546101099190610673565b925050819055005b600080fd5b34801561012257600080fd5b5061012b610270565b005b34801561013957600080fd5b50610142610371565b60405161014f9190610686565b60405180910390f35b34801561016457600080fd5b5061012b6103d3565b34801561017957600080fd5b5061012b61042c565b34801561018e57600080fd5b5061012b6104ff565b3480156101a357600080fd5b506002546101b19060ff1681565b604051901515815260200161014f565b3480156101cd57600080fd5b5061012b61051b565b3480156101e257600080fd5b506101f66101f13660046106d3565b61052f565b6040516001600160a01b03909116815260200161014f565b34801561021a57600080fd5b506000546001600160a01b03166101f6565b34801561023857600080fd5b5061024260055481565b60405190815260200161014f565b34801561025c57600080fd5b5061012b61026b3660046106ec565b610559565b60025460ff166102e3577ff3ba6a32224bd1840dbae5a49fc0ad8a7591033967326be8175700bd4cd904e16040516102d9906020808252601b908201527f57616c6c6574206372656174696f6e2069732064697361626c65640000000000604082015260600190565b60405180910390a1565b6000306040516102f290610611565b6001600160a01b039091168152602001604051809103906000f08015801561031e573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b039290921691909117905550565b606060018054806020026020016040519081016040528092919081815260200182805480156103c957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103ab575b5050505050905090565b6103db610594565b6000546001600160a01b03166001600160a01b03166108fc60055447610401919061071c565b6040518115909202916000818181858888f19350505050158015610429573d6000803e3d6000fd5b50565b6004546001600160a01b031633146104815760405162461bcd60e51b81526020600482015260136024820152722cb7ba93b932903737ba1030b71030b236b4b760691b60448201526064015b60405180910390fd5b600554156104c95760405162461bcd60e51b8152602060048201526015602482015274139bc81999595cc818dbdb1b1958dd1959081e595d605a1b6044820152606401610478565b600554604051339180156108fc02916000818181858888f193505050501580156104f7573d6000803e3d6000fd5b506000600555565b610507610594565b6002805460ff19811660ff90911615179055565b610523610594565b61052d60006105c1565b565b6001818154811061053f57600080fd5b6000918252602090912001546001600160a01b0316905081565b610561610594565b6001600160a01b03811661058b57604051631e4fbdf760e01b815260006004820152602401610478565b610429816105c1565b6000546001600160a01b0316331461052d5760405163118cdaa760e01b8152336004820152602401610478565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019d8061073083390190565b634e487b7160e01b600052601160045260246000fd5b60008261065157634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761066d5761066d61061e565b92915050565b8082018082111561066d5761066d61061e565b6020808252825182820181905260009190848201906040850190845b818110156106c75783516001600160a01b0316835292840192918401916001016106a2565b50909695505050505050565b6000602082840312156106e557600080fd5b5035919050565b6000602082840312156106fe57600080fd5b81356001600160a01b038116811461071557600080fd5b9392505050565b8181038181111561066d5761066d61061e56fe608060405234801561001057600080fd5b5060405161019d38038061019d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61010a806100936000396000f3fe60806040526004361060205760003560e01c806311ebbf2414606b57600080fd5b36606657600080546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015605d573d6000803e3d6000fd5b5060646076565b005b600080fd5b348015605d57600080fd5b600080546040805163047aefc960e21b815290516001600160a01b039092169283926311ebbf2492600480820193929182900301818387803b15801560ba57600080fd5b505af115801560cd573d6000803e3d6000fd5b505050505056fea2646970667358221220d39b20a0a9f76c29be500de341d8e7cd9b894e1bfa9db2395c12c25dabf9c5d164736f6c63430008160033a264697066735822122092a8f2cc12c9fe20606f29d762ca88e74f738cbe84435688af1b9932b43efab164736f6c63430008160033608060405234801561001057600080fd5b5060405161019d38038061019d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61010a806100936000396000f3fe60806040526004361060205760003560e01c806311ebbf2414606b57600080fd5b36606657600080546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015605d573d6000803e3d6000fd5b5060646076565b005b600080fd5b348015605d57600080fd5b600080546040805163047aefc960e21b815290516001600160a01b039092169283926311ebbf2492600480820193929182900301818387803b15801560ba57600080fd5b505af115801560cd573d6000803e3d6000fd5b505050505056fea2646970667358221220d39b20a0a9f76c29be500de341d8e7cd9b894e1bfa9db2395c12c25dabf9c5d164736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80636a09d4b2116100645780636a09d4b214610197578063715018a6146101c15780637ad71f72146101d65780638da5cb5b1461020e578063f071db5a1461022c578063f2fde38b1461025057600080fd5b806311ebbf24146101165780631bfa86011461012d5780633ccfd60b14610158578063476343ee1461016d5780635ca66b591461018257600080fd5b3661011157604080513381523460208201819052917f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f910160405180910390a16003546100ee606483610634565b6100f89190610656565b600560008282546101099190610673565b925050819055005b600080fd5b34801561012257600080fd5b5061012b610270565b005b34801561013957600080fd5b50610142610371565b60405161014f9190610686565b60405180910390f35b34801561016457600080fd5b5061012b6103d3565b34801561017957600080fd5b5061012b61042c565b34801561018e57600080fd5b5061012b6104ff565b3480156101a357600080fd5b506002546101b19060ff1681565b604051901515815260200161014f565b3480156101cd57600080fd5b5061012b61051b565b3480156101e257600080fd5b506101f66101f13660046106d3565b61052f565b6040516001600160a01b03909116815260200161014f565b34801561021a57600080fd5b506000546001600160a01b03166101f6565b34801561023857600080fd5b5061024260055481565b60405190815260200161014f565b34801561025c57600080fd5b5061012b61026b3660046106ec565b610559565b60025460ff166102e3577ff3ba6a32224bd1840dbae5a49fc0ad8a7591033967326be8175700bd4cd904e16040516102d9906020808252601b908201527f57616c6c6574206372656174696f6e2069732064697361626c65640000000000604082015260600190565b60405180910390a1565b6000306040516102f290610611565b6001600160a01b039091168152602001604051809103906000f08015801561031e573d6000803e3d6000fd5b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b039290921691909117905550565b606060018054806020026020016040519081016040528092919081815260200182805480156103c957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103ab575b5050505050905090565b6103db610594565b6000546001600160a01b03166001600160a01b03166108fc60055447610401919061071c565b6040518115909202916000818181858888f19350505050158015610429573d6000803e3d6000fd5b50565b6004546001600160a01b031633146104815760405162461bcd60e51b81526020600482015260136024820152722cb7ba93b932903737ba1030b71030b236b4b760691b60448201526064015b60405180910390fd5b600554156104c95760405162461bcd60e51b8152602060048201526015602482015274139bc81999595cc818dbdb1b1958dd1959081e595d605a1b6044820152606401610478565b600554604051339180156108fc02916000818181858888f193505050501580156104f7573d6000803e3d6000fd5b506000600555565b610507610594565b6002805460ff19811660ff90911615179055565b610523610594565b61052d60006105c1565b565b6001818154811061053f57600080fd5b6000918252602090912001546001600160a01b0316905081565b610561610594565b6001600160a01b03811661058b57604051631e4fbdf760e01b815260006004820152602401610478565b610429816105c1565b6000546001600160a01b0316331461052d5760405163118cdaa760e01b8152336004820152602401610478565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019d8061073083390190565b634e487b7160e01b600052601160045260246000fd5b60008261065157634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761066d5761066d61061e565b92915050565b8082018082111561066d5761066d61061e565b6020808252825182820181905260009190848201906040850190845b818110156106c75783516001600160a01b0316835292840192918401916001016106a2565b50909695505050505050565b6000602082840312156106e557600080fd5b5035919050565b6000602082840312156106fe57600080fd5b81356001600160a01b038116811461071557600080fd5b9392505050565b8181038181111561066d5761066d61061e56fe608060405234801561001057600080fd5b5060405161019d38038061019d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61010a806100936000396000f3fe60806040526004361060205760003560e01c806311ebbf2414606b57600080fd5b36606657600080546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015605d573d6000803e3d6000fd5b5060646076565b005b600080fd5b348015605d57600080fd5b600080546040805163047aefc960e21b815290516001600160a01b039092169283926311ebbf2492600480820193929182900301818387803b15801560ba57600080fd5b505af115801560cd573d6000803e3d6000fd5b505050505056fea2646970667358221220d39b20a0a9f76c29be500de341d8e7cd9b894e1bfa9db2395c12c25dabf9c5d164736f6c63430008160033a264697066735822122092a8f2cc12c9fe20606f29d762ca88e74f738cbe84435688af1b9932b43efab164736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 603,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "wallets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 606,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "isCreatingNewWallets",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "_feePercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 612,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "_adminAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 614,
        "contract": "contracts/MasterMerchant.sol:MasterMerchant",
        "label": "feesCollected",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}